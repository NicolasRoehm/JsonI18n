<?php

require_once '../JsonI18n.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-21 at 04:27:25.
 * @ignore No phpDoc required for test cases.
 */
class JsonI18nTest extends PHPUnit_Framework_TestCase {

    /**
     * @var JsonI18n
     */
    protected $object;
    
    /**
     * Some sample array data
     * @var array
     */
    protected $arr = array(
        array('headsign_en' => 'University', 'headsign_fr' => 'Université'),
        array('headsign_en' => 'College', 'headsign_fr' => 'Collège'),
        array('headsign_en' => 'Airport', 'headsign_fr' => 'Aéroport')
    );

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new JsonI18n('en-CA');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    /**
     * @covers JsonI18n::__construct
     */
    public function testDefaultConstructor() {
        $obj1 = new JsonI18n();
        $obj2 = new JsonI18n('en-CA');
        
        $this->assertEquals(PHPUnit_Framework_Assert::readAttribute($obj1, 'lang'), PHPUnit_Framework_Assert::readAttribute($obj1, 'defaultLanguage'));
        $this->assertEquals(PHPUnit_Framework_Assert::readAttribute($obj2, 'lang'), 'en-CA');
    }

    /**
     * @covers JsonI18n::addResource
     */
    public function testAddResource() {
        $this->object->addResource('resources/test.json');

        $this->assertArrayHasKey('values', PHPUnit_Framework_Assert::readAttribute($this->object, 'data'));
        $this->assertArrayHasKey('arrayGroups', PHPUnit_Framework_Assert::readAttribute($this->object, 'data'));
    }
    
    /**
     * @covers JsonI18n::addResource
     * @expectedException PHPUnit_Framework_Error_Warning
     */
    public function testAddResourceInvalidFile() {
        $this->object->addResource('');
    }

    /**
     * @covers JsonI18n::getLanguage
     */
    public function testGetLanguage() {
        $this->assertEquals($this->object->getLanguage(), 'en-CA');
    }

    /**
     * @covers JsonI18n::__
     */
    public function test__() {
        $this->object->addResource('resources/test.json');

        $this->assertEquals($this->object->__('documentTitleTag'), 'Quick planner');
        $this->assertEquals($this->object->__('documentTitleTag', 'fr-CA'), 'Planificateur rapide');
    }
    
    /**
     * @covers JsonI18n::__
     * @expectedException \OutOfBoundsException
     * @expectedExceptionMessage Invalid language: zh-CN
     */
    public function test__InvalidLanguage() {
        $this->object->addResource('resources/test.json');
        $this->object->__('documentTitleTag', 'zh-CN');
    }
    
    /**
     * @covers JsonI18n::__
     * @expectedException \OutOfBoundsException
     * @expectedExceptionMessage Invalid key: null
     */
    public function test__InvalidKey() {
        $this->object->addResource('resources/test.json');
        $this->object->__('null');
    }

    /**
     * @covers JsonI18n::_f
     */
    public function test_f() {
        $this->object->addResource('resources/test.json');

        $this->assertEquals($this->object->_f('destination', 'Kanata'), 'Destination: Kanata');
        $this->assertEquals($this->object->_f('numBuses', 2), 'You will need to transfer 2 time(s).');
        $this->assertEquals($this->object->_f('instructionTake', array(95, 'Campus Station', '18:01')), 'Board the 95 at Campus Station at 18:01.');

        $this->assertEquals($this->object->_f('destination', 'Kanata', 'fr-CA'), 'Destination : Kanata');
        $this->assertEquals($this->object->_f('numBuses', 2, 'fr-CA'), 'Vous devez transferer 2 fois.');
        $this->assertEquals($this->object->_f('instructionTake', array(95, 'Station Campus', '18h01'), 'fr-CA'), 'Embarquer le 95 à Station Campus à 18h01.');
        
        $this->assertEquals($this->object->_f('destination', NULL), 'Destination: ');
        $this->assertEquals($this->object->_f('numBuses', NULL), 'You will need to transfer 0 time(s).');
    }
    
    /**
     * @covers JsonI18n::_f
     * @expectedException \OutOfBoundsException
     * @expectedExceptionMessage Invalid language: zh-CN
     */
    public function test_fInvalidLanguage() {
        $this->object->addResource('resources/test.json');
        $this->object->_f('numBuses', 0, 'zh-CN');
    }
    
    /**
     * @covers JsonI18n::_f
     * @expectedException \OutOfBoundsException
     * @expectedExceptionMessage Invalid key: null
     */
    public function test_fInvalidKey() {
        $this->object->addResource('resources/test.json');
        $this->object->_f('null', 0);
    }
    
    /**
     * @covers JsonI18n::_f
     * @expectedException \InvalidArgumentException
     */
    public function test_fInvalidStrings() {
        $this->object->addResource('resources/test.json');
        $this->object->_f('numBuses', true);
    }

    /**
     * @covers JsonI18n::localizeArray
     */
    public function testLocalizeArray() {
        $this->object->addResource('resources/test.json');
        
        $arr1 = $this->arr;
        $arr2 = $this->arr;
        
        $this->object->localizeArray($arr1, 'headsign', 'en-CA');
        $this->object->localizeArray($arr2, 'headsign', 'fr-CA');
        
        $this->assertEquals($arr1, array(
            array('headsign' => 'University'),
            array('headsign' => 'College'),
            array('headsign' => 'Airport')
        ));
        
        $this->assertEquals($arr2, array(
            array('headsign' => 'Université'),
            array('headsign' => 'Collège'),
            array('headsign' => 'Aéroport')
        ));
    }
    
    /**
     * @covers JsonI18n::localizeArray
     * @expectedException \OutOfBoundsException
     * @expectedExceptionMessage Invalid group: endpoint
     */
    public function testLocalizeArrayInvalidGroup() {
        $this->object->addResource('resources/test.json');
        
        $this->object->localizeArray($this->arr, 'endpoint', 'en-CA');
    }
    
    /**
     * @covers JsonI18n::localizeArray
     * @expectedException \OutOfBoundsException
     * @expectedExceptionMessage Invalid language: zh-CN
     */
    public function testLocalizeArrayInvalidLanguage() {
        $this->object->addResource('resources/test.json');
        
        $this->object->localizeArray($this->arr, 'headsign', 'zh-CN');
    }
    
    /**
     * @covers JsonI18n::localizeArray
     * @expectedException \OutOfBoundsException
     * @expectedExceptionMessage Invalid array index: invalid
     */
    public function testLocalizeArrayInvalidIndex() {
        $this->object->addResource('resources/test.json');
        
        $this->object->localizeArray($this->arr, 'headsign', 'en-US');
    }

}