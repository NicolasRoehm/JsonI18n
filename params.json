{"name":"JsonI18n","tagline":"Simple PHP internationalization library using JSON data","body":"## Installation\r\n\r\n### Using Composer?\r\nJsonI18n is available through the [Packagist](https://packagist.org/packages/rinkattendant6/json-i18n) repository.\r\n\r\nAdd this dependency to your composer.phar file:\r\n\r\n```json\r\n\"require\": {\r\n    \"rinkattendant6/json-i18n\": \"dev-master\"\r\n}\r\n```\r\n\r\n### Not using Composer?\r\nPerhaps you should look into it for your next project. For now, download the tarball and extract the JsonI18n.php file into your project.\r\n\r\n## Usage\r\n### Load the translations\r\nInstantiate the `JsonI18n` class with a default language and call the `addResource` method of the class with the path of the translation file:\r\n\r\n```php\r\n$jsoni18n = new JsonI18n('en-CA');\r\n$jsoni18n->addResource('home.json');\r\n$jsoni18n->addResource('menu.json'); // another file\r\n```\r\nLoading a file with keys that already exist will overwrite the values of existing keys.\r\n\r\n### Use the translations\r\n\r\n#### Print (echo) it out\r\n```php\r\n$jsoni18n->_e('YOUR KEY HERE');\r\n```\r\n\r\n#### Return it\r\nReturning the localized text is useful if you wish to concatenate it or use it in another function:\r\n```php\r\n$jsoni18n->__('YOUR KEY HERE');\r\n// For instance, you can do string manipulation to the text:\r\necho substr($jsoni18n->__('buttonText'), 0, 10);\r\necho strtoupper($jsoni18n->__('companySlogan'));\r\n```\r\n\r\n#### Text with parameters\r\nSometimes you will need to use variables within a string. Splitting up the string becomes a messy process and your translators will despise you for it because the context is lost.\r\n\r\nPHP's [`sprintf`](https://www.php.net/manual/en/function.sprintf.php) function allows variables to be substituted into strings, so for instance you could write:\r\n```\r\n...\r\n\"busFare\": \"The fare for a regular bus is %.2f dollars.\",\r\n\"stationStatus\": \"Right now, %d buses are active at %s station.\"\r\n```\r\n\r\nThese strings are called *formatted* strings. To process these in JsonI18n, you can use the `_f` and `_ef` methods:\r\n```php\r\n$jsoni18n->_ef('busFare', 3.40); // The fare for a regular bus is 3.40 dollars.\r\n$jsoni18n->_ef('stationStatus', array(5, 'Central')); // Right now, 5 buses are active at Central station.\r\n```\r\n\r\n#### In all the languages!\r\n\r\nRemember the language you instantiated the class with? That's the language you'll be getting unless you explicitly specify the output language as the last parameter of these methods:\r\n```php\r\n$jsoni18n->_ef('busFare', 3.40, 'fr-CA'); // Le tarif pour l'autobus est $3.40\r\n```\r\n\r\nThis allows you to print the text out in **ALL THE LANGUAGES** (provided that you have the translations of course).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}